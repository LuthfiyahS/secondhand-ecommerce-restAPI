#!/usr/bin/env node

/**
 * Module dependencies.
 */

const debug = require('debug')('express-deployment:server');
const http = require('http');
const app = require('../app');
require('dotenv').config();

/**
 * Normalize a port into a number, string, or false.
 */

const normalizePort = val => {
    const port = parseInt(val, 10);

    // named pipe
    if (isNaN(port)) return val;

    // port number
    if (port >= 0) return port;

    return false;
};

/**
 * Event listener for HTTP server "error" event.
 */

const onError = error => {
    if (error.syscall !== 'listen') throw error;

    const bind = `${typeof port === 'string' ? 'Pipe' : 'Port'} $${port}`;

    // handle specific listen errors with friendly messages
    switch (error.code) {
        case 'EACCES':
            console.error(bind + ' requires elevated privileges');
            process.exit(1);
        case 'EADDRINUSE':
            console.error(bind + ' is already in use');
            process.exit(1);
        default:
            throw error;
    }
};

/**
 * Event listener for HTTP server "listening" event.
 */

const onListening = () => {
    const addr = server.address();
    const bind =
        typeof addr === 'string' ? `pipe ${addr}` : `port ${addr.port}`;
    debug(`Listening on ${bind}`);

    // development mode
    if (process.env.NODE_ENV === '' || process.env.NODE_ENV === 'development')
        console.log(`Listening at http://localhost:${addr.port}`);
};

/**
 * Get port from environment and store in Express.
 */

const port = normalizePort(process.env.PORT || '8000');
app.set('port', port);

/**
 * Create HTTP server.
 */

const server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

server.listen(port);
server.on('error', onError);
server.on('listening', onListening);
